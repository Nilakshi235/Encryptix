import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder, OneHotEncoder
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline


data = pd.read_csv("Titanic-Dataset.csv")


print(data.info())
print(data.head())


data['Survived'] = data['Survived'].astype('category')
data['Sex'] = data['Sex'].astype('category')
data['Embarked'] = data['Embarked'].astype('category')  


missing_values = data.isnull().sum()
print(missing_values)


data['Age'] = data['Age'].fillna(data['Age'].median())
print(data['Age'].isnull().sum())


data['Embarked'] = data['Embarked'].fillna(data['Embarked'].mode()[0])
print(data['Embarked'].isnull().sum())


data.drop(columns=['Cabin'], inplace=True)


print(data.info())


print("Summary statistics:\n", data.describe())

print("Frequency count:\n", data['Sex'].value_counts())
print(data['Embarked'].value_counts())
print(data['Survived'].value_counts())


data.hist(bins=30, figsize=(14,14))
plt.show()


label_encoder = LabelEncoder()
data['Sex'] = label_encoder.fit_transform(data['Sex'])
data['Embarked'] = label_encoder.fit_transform(data['Embarked'])


X = data.drop(columns=['Survived'])
y = data['Survived']

print("Features (X):\n", X.head())
print("Target (y):\n", y.head())


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


numeric_features = ['Age', 'Fare']
numeric_transformer = Pipeline(steps=[
    ('scaler', StandardScaler())
])

preprocessor = ColumnTransformer(
    transformers=[
        ('num', numeric_transformer, numeric_features)
    ])

model = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('classifier', LogisticRegression())
])


model.fit(X_train, y_train)


y_pred = model.predict(X_test)


accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy:.2f}")


print(classification_report(y_test, y_pred))


print(confusion_matrix(y_test, y_pred))


new_data = pd.DataFrame({
    'Pclass': [3, 1],
    'Sex': [0, 1],  # Assuming 0 for male and 1 for female
    'Age': [22, 38],
    'SibSp': [1, 1],
    'Parch': [0, 0],
    'Fare': [7.25, 71.2833],
    'Embarked': [1, 0]  # Assuming 1 for a particular port and 0 for another
})

new_data[['Age', 'Fare']] = preprocessor.transform(new_data[['Age', 'Fare']])


predictions = model.predict(new_data)
print(f"Predictions: {predictions}")
