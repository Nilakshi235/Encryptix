import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

# Load the dataset
data = pd.read_csv('IRIS.csv')

# Display the first few rows of the dataset
print(data.head())

# Check for missing values
print(data.isnull().sum())

# Feature set and target variable
X = data.drop(columns=['species'])
y = data['species']

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

# Standardize the features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Train the model
model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
print("Accuracy:", accuracy_score(y_test, y_pred))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("Classification Report:\n", classification_report(y_test, y_pred))

# Plotting the confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred)
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=model.classes_, yticklabels=model.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Define new data and predict it
new_data = np.array([[5.1, 3.5, 1.4, 0.2],   # Example data for setosa
                     [6.7, 3.0, 5.2, 2.3],   # Example data for virginica
                     [5.9, 3.0, 4.2, 1.5]])  # Example data for versicolor

# Standardize the new data
new_data = scaler.transform(new_data)

# Make predictions
new_predictions = model.predict(new_data)
new_predictions_proba = model.predict_proba(new_data)

# Display predictions
for i, pred in enumerate(new_predictions):
    print(f"New data point {i+1} is predicted to be: {pred} with probabilities {new_predictions_proba[i]}")

# Visualizing new predictions
new_data_df = pd.DataFrame(new_data, columns=X.columns)
new_data_df['Predicted Species'] = new_predictions

print(new_data_df)
